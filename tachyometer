//-------------------------------------
// Tachometer
//-------------------------------------

// External interrpt pin for sensor
#define interruptPin 3

unsigned long lastUpdate = 0;  // for timing display updates
volatile long accumulator = 0;  // sum of last 8 revolution times
volatile unsigned long startTime = 0; // start of revolution in microseconds
volatile unsigned int revCount = 0; // number of revolutions since last display update
unsigned int rpm = 0;
double freq = 0;
double oldFreq;
double error = 1;
double eps = 0.01 * freq;

//-------------------------------------
// Setup - runs once at startup
//-------------------------------------
void setup()
{
  // Initialize the serial port and display
  Serial.begin(2000000);

  // Enable the pullup resistor and attach the interrupt
  pinMode(interruptPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(interruptPin), tach_interrupt, FALLING);
}

//-------------------------------------
// Main Loop - runs repeatedly.
// Calculate RPM and Update LCD Display
//-------------------------------------
void loop()
{
  while (error > eps) {
    if (millis() - lastUpdate > 1000) // update every second
    {
      // divide number of microseconds in a minute, by the average interval.
      if (revCount > 0)
      {
        oldFreq = freq;
        rpm = 60000000 / (accumulator >> 1);
        freq = (double) rpm / 60.0;
        error = abs(oldFreq - freq) / freq;
      }

      //    if (rpm != 0) {
      //      Serial.println(rpm);
      //      Serial.println(freq);
      //    }
      lastUpdate = millis();
      revCount = 0;
    }
  
  if (error<eps){
    Serial.print("Caculated Freq: ");
    Serial.println(freq);
    Serial.print("Calculated RPM: ");
    Serial.println(rpm);
    detachInterrupt(interruptPin);
  }
  }
}

  //-------------------------------------
  // Interrupt Handler
  // IR reflective sensor - target passed
  // Calculate revolution time
  //-------------------------------------
  void tach_interrupt()
  {
    // calculate the microseconds since the last interrupt
    long usNow = micros();
    long elapsed = usNow - startTime;
    startTime = usNow;  // reset the clock

    //  // Accumulate the last 8 interrupt intervals
    accumulator -= (accumulator >> 1);
    accumulator += elapsed;
    revCount++;
  }
